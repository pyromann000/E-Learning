<?xml version="1.0"?>
<lesson2>
    <lessons>
        <title>Lesson 2.1</title>
        <topic>IF ELSE Statements</topic>
        <description>The if statement checks if the variable number is divisible by 2 without any remainder. This is determined by the condition number % 2 == 0. If the condition evaluates to true, it means that number is even, and the code block inside the if statement is executed. It prints a message indicating that the number is even: is even. If the condition evaluates to false, it means that number is not divisible by 2 without any remainder, indicating that it is an odd number. In this case, the code block inside the else statement is executed. It prints a message indicating that the number is odd: is odd.</description>
        <example>Example:</example>
        <image>example_code_1.png</image>
        <section>The if statement checks if the variable number is divisible by 2 without any remainder. This is determined by the condition number % 2 == 0. If the condition evaluates to true, it means that number is even, and the code block inside the if statement is executed. It prints a message indicating that the number is even: is even. If the condition evaluates to false, it means that number is not divisible by 2 without any remainder, indicating that it is an odd number. In this case, the code block inside the else statement is executed. It prints a message indicating that the number is odd: is odd.</section>
    </lessons>
    <lessons>
        <title>Lesson 2.2</title>
        <topic>WHILE Loops</topic>
        <description>The while loop in Java continuously executes a block of code as long as a specified condition remains true. It evaluates the condition before each iteration, and if the condition is true, the loop body is executed. The loop continues until the condition becomes false, at which point the program exits the loop and continues with the next line of code after the loop.</description>
        <example>Example</example>
        <image>example.png</image>
        <section>i is initialized to 1. The loop condition i (&lt;= 5) is evaluated before each iteration. Use caution to ensure the loop condition will eventually become false to avoid infinite loops. The condition is a boolean expression (a condition that evaluates to true or false). The code block enclosed within the curly braces {} is executed repeatedly as long as the condition remains true.</section>
    </lessons>
<lessons><title>Lesson 2.3</title><topic>DO-WHILE</topic><description>The do-while loop in Java ensures that a block of code is executed at least once before checking the loop condition. It continues to repeat as long as the condition remains true. This structure is handy when you need to execute a block of code first and then decide whether to repeat it based on a condition.</description><example>Example</example><image>do_while_example.png</image><section>Initializes the counter variable num to 1. Enters the do block and prints the current value of num to the console: Number:  followed by the value of num. Increments num by 1. Checks the condition num &lt; = 5 after the do block. If the condition is true, it repeats the process. If the condition is false, it exits the loop.</section></lessons><lessons><title>Lesson 2.4</title><topic>FOR LOOP</topic><description>In Java, the for loop is a compact control structure used for iterating over a range of values or elements in arrays and collections. Its concise syntax makes it ideal for situations where you know the number of iterations in advance. The loop consists of three parts enclosed in parentheses: initialization, condition, and iteration expression, separated by semicolons. It simplifies repetitive tasks by automatically handling the initialization, condition checking, and iteration steps within a single line of code, enhancing code readability and efficiency.</description><example>Example</example><image>for_loop_example.png</image><section>This loop initializes a counter variable i to 1. It prints the current value of i to the console. i is incremented by 1. After executing the loop, it checks if i is less than or equal to 5. If i is still 5 or less, it continues looping. The loop stops once i exceeds 5.</section></lessons><lessons><title>Lesson 2.5</title><topic>FOR LOOP</topic><description>The for-each loop in Java simplifies iterating over arrays, collections, or other iterable objects by automatically handling iteration control. It sequentially processes each element in the specified data structure, enhancing code readability and reducing the risk of errors associated with manual indexing.</description><example>Example</example><image>for_each_example.png</image><section>The document.createElement(li) creates a new list item (li) element for each number in the array. The listItem.textContent = number; assigns the value of the current number to the text content of the list item. The numberList.appendChild(listItem); appends the list item to the unordered list (ul) element, adding each number to the list dynamically.</section></lessons></lesson2>
